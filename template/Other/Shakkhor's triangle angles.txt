#include<bits/stdc++.h>

using namespace std;

#define fRead(x)  freopen(x,"r",stdin)
#define fWrite(x) freopen (x,"w",stdout)

#define LL long long
#define ULL unsigned long long
#define ff first
#define ss second
#define pb push_back
#define INF 2e16
#define PI acos(-1.0)
#define mk make_pair
#define pii pair<int,int>
#define pll pair<LL,LL>


#define min3(a,b,c) min(a,min(b,c))
#define max3(a,b,c) max(a,max(b,c))
#define min4(a,b,c,d) min(a,min(b,min(c,d)))
#define max4(a,b,c,d) max(a,max(b,max(c,d)))
#define SQR(a) ((a)*(a))
#define FOR(i,a,b) for(int i=a;i<=b;i++)
#define ROF(i,a,b) for(int i=a;i>=b;i--)
#define REP(i,b) for(int i=0;i<b;i++)
#define MEM(a,x) memset(a,x,sizeof(a))
#define ABS(x) ((x)<0?-(x):(x))

#define scanI(a) scanf("%d",&a)
#define scanI2(a,b) scanI(a) , scanI(b)
#define scanI3(a,b,c) scanI(a), scanI(b), scanI(c)
#define scanI4(a,b,c,d) scanI(a), scanI(b), scanI(c), scanI(d)

#define scanL(a) scanf("%I64d",&a)
#define scanL2(a,b) scanL(a) , scanL(b)
#define scanL3(a,b,c) scanL(a), scanL(b), scanL(c)
#define scanL4(a,b,c,d) scanL(a), scanL(b), scanL(c), scanL(d)

#define SORT(v) sort(v.begin(),v.end())
#define REV(v) reverse(v.begin(),v.end())


#define FastRead ios_base::sync_with_stdio(0);cin.tie(nullptr);

#ifdef MATRIX

const int N=3;
const LL mod = 10007;
void MatMul(int A[N][N], int B[N][N])
{
    int R[N][N];
    memset(R, 0, sizeof(R));
    REP(i, 3) REP(j, 3) REP(k, 3) R[i][j] = (R[i][j] + A[i][k] * B[k][j]) % mod;
    REP(i, 3) REP(j, 3) B[i][j] = R[i][j];
}

int R[N][N] = {{2,0,0},{1,0,0},{1,0,0}};
int M[N][N] = {{1,1,2},{1,0,0},{0,1,0}};

void MatPow(int B)
{
    while(B)
    {
        if(B & 1) MatMul(M, R);
        MatMul(M, M);
        B = B >> 1;
    }
}
#endif

bool Check(int N,int pos) { return (bool)(N&(1<<pos)); }
int Set(int N,int pos) { return (N|(1<<pos)); }

int fx[ ] = {-1,0,1,0};
int fy[ ] = {0,1,0,-1};

inline LL BigMod(LL B,LL P,LL M){LL R=1;while(P>0){if(P%2==1){R=(R*B)%M;}P/=2;B=(B*B)%M;}return R;}
#ifdef FAC
LL fac[200005];void FacGen(){fac[0]=1;FOR(i,1,200000)fac[i]=(fac[i-1]*i)%mod;}
LL COM(LL a,LL b){return ((fac[a]*BigMod((fac[b]*fac[a-b])%mod,mod-2,mod))%mod+mod)%mod;}
#endif

#ifdef SIEVE
const int N = 100000;
bool stat[N+5];
void siv()
{
    int sq = sqrt(N);for(int i =4;i<=N;i+=2)stat[i]=1;
    for(int i=3;i<=sq;i+=2)if(!stat[i])for(int j=i*i;j<=N;j+=2*i)stat[j]=1;
}
#endif
#define PI acos(-1.0)

long double dis(long double x1,long double y1,long double x2,long double y2)
{
    long double D = (x1-x2)*(x1-x2) + (y1-y2)*(y1-y2);
    return sqrt(D);
}
long double otherAngleFind(long double biggerAngle, long double largestDistance, long double smallDistance)
{
    long double otherAngle;
    otherAngle = smallDistance *sin(biggerAngle*3.14159265/180);
    otherAngle = otherAngle/largestDistance;
    otherAngle = asin(otherAngle)*180.0 / PI;
    return otherAngle;
}

long double BiggerAngleFind(long double largestDistance, long double smallDistanceOne, long double smallDistanceTwo)
{
    long double biggerAngle;
    biggerAngle =  pow(smallDistanceOne,2) + pow(smallDistanceTwo, 2) - pow(largestDistance,2);
    biggerAngle = fabs(biggerAngle/(2*smallDistanceOne*smallDistanceTwo));
    biggerAngle = acos(biggerAngle)* 180.0 / PI;
    return biggerAngle;
}

long double TriangleAngleCalculation(long double side1, long double side2, long double side3)
{
    long double angle1, angle2, angle3;
    long double total;

    int largestLength = 0;

    if(side1>side2 && side1 > side3)
    {
        angle1 = BiggerAngleFind(side1, side2, side3);
        angle2 = otherAngleFind(angle1, side1, side2);
        angle3 = otherAngleFind(angle1, side1, side3);

        total=angle1+angle2+angle3;

        if(total <180)
        {
            angle1 = 180 - angle1;
        }
    }
    else if(side2 > side3 && side2 > side1)
    {
        angle2 = BiggerAngleFind(side2, side1, side3);
        angle1 = otherAngleFind(angle2, side2, side1);
        angle3 = otherAngleFind(angle2, side2, side3);

        total=angle1+angle2+angle3;

        if(total <180)
        {
            angle2 = 180 - angle2;
        }
    }
    else
    {
        angle3 = BiggerAngleFind(side3, side1, side2);
        angle1 = otherAngleFind(angle3, side3, side2);
        angle2 = otherAngleFind(angle3, side3, side2);

        total=angle1+angle2+angle3;

        if(total <180)
        {
            angle3 = 180 - angle3;
        }
    }
    return angle3;
}

long double angle(long double x1,long double y1,long double x2,long double y2,long double x3,long double y3) ///The angle around point x2,y2
{
    long double A = dis(x1,y1,x2,y2);
    long double B = dis(x2,y2,x3,y3);
    long double C = dis(x1,y1,x3,y3);
    return TriangleAngleCalculation(A,B,C);
}
int main()
{
    long double x1,y1,x2,y2,x3,y3;
    cin >> x1>>y1>>x2>>y2>>x3>>y3;
    cout << angle(x1,y1,x2,y2,x3,y3);
}